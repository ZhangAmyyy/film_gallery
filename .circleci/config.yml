version: 2.1

executors:
  basic-executor:
    docker:
      - image: circleci/python:3.8

aliases:
  - &source-install-path
    run:
      name: Export Path
      command: |
        source '/home/circleci/google-cloud-sdk/completion.bash.inc'
        source '/home/circleci/google-cloud-sdk/path.bash.inc'
        

jobs:
  build:
    executor: basic-executor
    steps:
      - checkout
      - run:
          name: Install gcloud SDK
          command: |
            curl https://sdk.cloud.google.com > install.sh
            bash install.sh --disable-prompts
      - *source-install-path
      - run:
          name: Show gcloud version
          command: |
            gcloud version

  config:
    executor: basic-executor
    steps:
      - checkout
      - *source-install-path
      - run:
          name: Configure gcloud SDK
          command: |
            gcloud auth activate-service-account --key-file=.circleci/service-account-key.json
            gcloud --quiet config set project ${GOOGLE_PROJECT_ID}

  create-cluster:
    executor: basic-executor
    steps:
      - checkout
      - *source-install-path  
      - run:
          name: Check if cluster exists
          command: |
            gcloud container clusters describe ${GKE_CLUSTER_NAME} --zone ${GKE_CLUSTER_ZONE}
            if [ $? -eq 0 ]; then
              echo "Cluster already exists, skipping cluster creation"
            else
              echo "Cluster does not exist, creating new cluster"
              gcloud container clusters create ${GKE_CLUSTER_NAME} --zone ${GKE_CLUSTER_ZONE} --location-policy=BALANCED --no-enable-ip-alias --cluster-ipv4-cidr=10.0.0.0/16 --num-nodes=3 --disk-size=50GB
            fi

  connect-cluster:
    executor: basic-executor
    steps:
      - checkout
      - *source-install-path
      - run:
          name: Connet to cluster
          command: |
            gcloud components install gke-gcloud-auth-plugin
            gcloud components install kubectl
            gcloud container clusters get-credentials ${GKE_CLUSTER_NAME} --zone ${GKE_CLUSTER_ZONE} 

  pull-docker-image:
    executor: basic-executor
    steps:
      - checkout
      - setup_remote_docker
      - *source-install-path
      - run:
          name: Deploy Docker image
          command: |
            docker login -u "${DOCKER_HUB_USER}" -p "${DOCKER_HUB_PASSWORD}"
            gcloud auth configure-docker
            docker pull ${DOCKER_IMAGE}
            docker tag ${DOCKER_IMAGE} gcr.io/${GOOGLE_PROJECT_ID}/${DOCKER_IMAGE}
            docker push gcr.io/${GOOGLE_PROJECT_ID}/${DOCKER_IMAGE}

  cluster-deploy:
    executor: basic-executor
    steps:
      - checkout
      - *source-install-path
      - run:
          name: Check if deployment exists
          command: |
            if kubectl get deployment ${GKE_CLUSTER_DEPLOY}; then
              echo "Deployment already exists, skipping deployment creation"
              exit 0
            else
              echo "Deployment does not exist, creating new deployment"
              kubectl create deployment ${GKE_CLUSTER_DEPLOY} --image=gcr.io/${GOOGLE_PROJECT_ID}/${DOCKER_IMAGE}
              kubectl rollout status deployment/${GKE_CLUSTER_DEPLOY}
            fi

  cluster-service-deploy:
    executor: basic-executor
    steps:
      - checkout
      - *source-install-path
      - run:
          name: Check if service exists
          command: |
            if kubectl get service ${GKE_CLUSTER_DEPLOY} >/dev/null 2>&1; then
              echo "Service 'cinema-deploy' already exists, skipping service creation"
            else
              kubectl expose deployment ${GKE_CLUSTER_DEPLOY} --type=LoadBalancer --port 8080 --target-port 3000
            fi

            kubectl get services ${GKE_CLUSTER_DEPLOY}
            kubectl describe service ${GKE_CLUSTER_DEPLOY}

workflows:
  build_and_deploy:
    jobs:
      - build
      - config: 
          requires:
            - build
      - create-cluster: 
          requires:
            - config
      - connect-cluster: 
          requires:
            - create-cluster
      - pull-docker-image:
          requires:
            - connect-cluster
      - cluster-deploy:
          requires:
            - pull-docker-image
      - cluster-service-deploy:
          requires:
            - cluster-deploy

      