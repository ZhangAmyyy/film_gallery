version: 2.1

jobs:
  build_and_deploy:
    docker:
      - image: circleci/python:3.8
    
    environment:
      GOOGLE_PROJECT_ID: 'cinema-389321'  
      GCLOUD_SERVICE_ACCOUT: cinema-gke-deploy@cinema-389321.iam.gserviceaccount.com

    steps:
      - checkout

      # 安装 gcloud SDK
      - run:
          name: Install gcloud SDK
          command: |
            curl https://sdk.cloud.google.com > install.sh
            bash install.sh --disable-prompts
            source '/home/circleci/google-cloud-sdk/completion.bash.inc'
            source '/home/circleci/google-cloud-sdk/path.bash.inc'
            gcloud version
          # persist_to_workspace:
          #   root: .
          #   paths:
          #     - $BASH_ENV
            
      # 配置 gcloud SDK
      - run:
          name: Configure gcloud SDK
          command: |
            source '/home/circleci/google-cloud-sdk/completion.bash.inc'
            source '/home/circleci/google-cloud-sdk/path.bash.inc'
            gcloud auth activate-service-account --key-file=.circleci/service-account-key.json
            gcloud --quiet config set project ${GOOGLE_PROJECT_ID}
            
      - run:
          name: Check if cluster exists
          command: |
            source '/home/circleci/google-cloud-sdk/completion.bash.inc'
            source '/home/circleci/google-cloud-sdk/path.bash.inc'
            gcloud container clusters describe cinema-cluster --zone us-central1-a
            if [ $? -eq 0 ]; then
              echo "Cluster already exists, skipping cluster creation"
            else
              echo "Cluster does not exist, creating new cluster"
              gcloud container clusters create cinema-cluster --zone us-central1-a --location-policy=BALANCED --no-enable-ip-alias --cluster-ipv4-cidr=10.0.0.0/16 --num-nodes=3 --disk-size=50GB
            fi
      
      - run:
          name: Connet to cluster
          command: |
            source '/home/circleci/google-cloud-sdk/completion.bash.inc'
            source '/home/circleci/google-cloud-sdk/path.bash.inc'
            gcloud components install gke-gcloud-auth-plugin
            gcloud components install kubectl
            gcloud container clusters get-credentials cinema-cluster --zone us-central1-a
      
      - setup_remote_docker
      - run:
          name: Deploy Docker image
          command: |
            source '/home/circleci/google-cloud-sdk/completion.bash.inc'
            source '/home/circleci/google-cloud-sdk/path.bash.inc'
            docker login -u "${DOCKER_HUB_USER}" -p "${DOCKER_HUB_PASSWORD}"
            gcloud auth configure-docker
            docker pull zhangyyamy/filmdb:dev-384
            docker tag zhangyyamy/filmdb:dev-384 gcr.io/${GOOGLE_PROJECT_ID}/zhangyyamy/filmdb:dev-384
            docker push gcr.io/${GOOGLE_PROJECT_ID}/zhangyyamy/filmdb:dev-384
      - run:
          name: Check if deployment exists
          command: |
            source '/home/circleci/google-cloud-sdk/completion.bash.inc'
            source '/home/circleci/google-cloud-sdk/path.bash.inc'
            if kubectl get deployment cinema-deploy; then
              echo "Deployment already exists, skipping deployment creation"
              exit 0
            else
              echo "Deployment does not exist, creating new deployment"
              kubectl create deployment cinema-deploy --image=gcr.io/${GOOGLE_PROJECT_ID}/zhangyyamy/filmdb:dev-384
              kubectl rollout status deployment/cinema-deploy
            fi

      - run:
          name: Check if service exists
          command: |
            source '/home/circleci/google-cloud-sdk/completion.bash.inc'
            source '/home/circleci/google-cloud-sdk/path.bash.inc'
            if kubectl get service cinema-deploy >/dev/null 2>&1; then
              echo "Service 'cinema-deploy' already exists, skipping service creation"
            else
              kubectl expose deployment cinema-deploy --type=LoadBalancer --port 8080
            fi
            
      -run:
          name: Get service info
          command: |
            kubectl get services cinema-deploy
            kubectl describe service cinema-deploy

            

workflows:
  build_and_deploy:
    jobs:
      - build_and_deploy
      